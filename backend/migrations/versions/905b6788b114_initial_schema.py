"""initial_schema

Revision ID: 905b6788b114
Revises:
Create Date: 2025-09-12 21:07:17.497258

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "905b6788b114"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "experiences",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "forms",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("intake", "ranking", "secondary", "become_volunteer", "become_participant", name="form_type"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "match_status",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "qualities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("slug", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "time_blocks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "treatments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(length=80), nullable=True),
        sa.Column("last_name", sa.String(length=80), nullable=True),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("auth_id", sa.String(), nullable=False),
        sa.Column("approved", sa.Boolean(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "available_times",
        sa.Column("time_block_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["time_block_id"],
            ["time_blocks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("time_block_id", "user_id"),
    )
    op.create_table(
        "form_submissions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("form_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("submitted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("answers", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(
            ["form_id"],
            ["forms.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "matches",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("participant_id", sa.UUID(), nullable=False),
        sa.Column("volunteer_id", sa.UUID(), nullable=False),
        sa.Column("chosen_time_block_id", sa.Integer(), nullable=True),
        sa.Column("match_status_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["chosen_time_block_id"],
            ["time_blocks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["match_status_id"],
            ["match_status.id"],
        ),
        sa.ForeignKeyConstraint(
            ["participant_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["volunteer_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ranking_preferences",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("target_role", sa.Enum("patient", "caregiver", name="target_role"), nullable=False),
        sa.Column("kind", sa.Enum("quality", "treatment", "experience", name="ranking_kind"), nullable=True),
        sa.Column("quality_id", sa.Integer(), nullable=True),
        sa.Column("treatment_id", sa.Integer(), nullable=True),
        sa.Column("experience_id", sa.Integer(), nullable=True),
        sa.Column("scope", sa.Enum("self", "loved_one", name="ranking_scope"), nullable=False),
        sa.Column("rank", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "(kind <> 'experience') OR (experience_id IS NOT NULL AND quality_id IS NULL AND treatment_id IS NULL)",
            name="ck_ranking_pref_experience_fields",
        ),
        sa.CheckConstraint(
            "(kind <> 'quality') OR (quality_id IS NOT NULL AND treatment_id IS NULL AND experience_id IS NULL)",
            name="ck_ranking_pref_quality_fields",
        ),
        sa.CheckConstraint(
            "(kind <> 'treatment') OR (treatment_id IS NOT NULL AND quality_id IS NULL AND experience_id IS NULL)",
            name="ck_ranking_pref_treatment_fields",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "target_role", "rank"),
    )
    op.create_table(
        "user_data",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(length=80), nullable=True),
        sa.Column("last_name", sa.String(length=80), nullable=True),
        sa.Column("date_of_birth", sa.Date(), nullable=True),
        sa.Column("email", sa.String(length=120), nullable=True),
        sa.Column("phone", sa.String(length=20), nullable=True),
        sa.Column("city", sa.String(length=100), nullable=True),
        sa.Column("province", sa.String(length=50), nullable=True),
        sa.Column("postal_code", sa.String(length=10), nullable=True),
        sa.Column("gender_identity", sa.String(length=50), nullable=True),
        sa.Column("pronouns", sa.JSON(), nullable=True),
        sa.Column("ethnic_group", sa.JSON(), nullable=True),
        sa.Column("marital_status", sa.String(length=50), nullable=True),
        sa.Column("has_kids", sa.String(length=10), nullable=True),
        sa.Column("diagnosis", sa.String(length=100), nullable=True),
        sa.Column("date_of_diagnosis", sa.Date(), nullable=True),
        sa.Column("other_treatment", sa.Text(), nullable=True),
        sa.Column("other_experience", sa.Text(), nullable=True),
        sa.Column("other_ethnic_group", sa.Text(), nullable=True),
        sa.Column("gender_identity_custom", sa.Text(), nullable=True),
        sa.Column("has_blood_cancer", sa.String(length=10), nullable=True),
        sa.Column("caring_for_someone", sa.String(length=10), nullable=True),
        sa.Column("loved_one_gender_identity", sa.String(length=50), nullable=True),
        sa.Column("loved_one_age", sa.String(length=10), nullable=True),
        sa.Column("loved_one_diagnosis", sa.String(length=100), nullable=True),
        sa.Column("loved_one_date_of_diagnosis", sa.Date(), nullable=True),
        sa.Column("loved_one_other_treatment", sa.Text(), nullable=True),
        sa.Column("loved_one_other_experience", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "suggested_times",
        sa.Column("match_id", sa.Integer(), nullable=False),
        sa.Column("time_block_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["matches.id"],
        ),
        sa.ForeignKeyConstraint(
            ["time_block_id"],
            ["time_blocks.id"],
        ),
        sa.PrimaryKeyConstraint("match_id", "time_block_id"),
    )
    op.create_table(
        "user_experiences",
        sa.Column("user_data_id", sa.UUID(), nullable=True),
        sa.Column("experience_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["experience_id"],
            ["experiences.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_data_id"],
            ["user_data.id"],
        ),
    )
    op.create_table(
        "user_loved_one_experiences",
        sa.Column("user_data_id", sa.UUID(), nullable=True),
        sa.Column("experience_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["experience_id"],
            ["experiences.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_data_id"],
            ["user_data.id"],
        ),
    )
    op.create_table(
        "user_loved_one_treatments",
        sa.Column("user_data_id", sa.UUID(), nullable=True),
        sa.Column("treatment_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["treatment_id"],
            ["treatments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_data_id"],
            ["user_data.id"],
        ),
    )
    op.create_table(
        "user_treatments",
        sa.Column("user_data_id", sa.UUID(), nullable=True),
        sa.Column("treatment_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["treatment_id"],
            ["treatments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_data_id"],
            ["user_data.id"],
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_treatments")
    op.drop_table("user_loved_one_treatments")
    op.drop_table("user_loved_one_experiences")
    op.drop_table("user_experiences")
    op.drop_table("suggested_times")
    op.drop_table("user_data")
    op.drop_table("ranking_preferences")
    op.drop_table("matches")
    op.drop_table("form_submissions")
    op.drop_table("available_times")
    op.drop_table("users")
    op.drop_table("treatments")
    op.drop_table("time_blocks")
    op.drop_table("roles")
    op.drop_table("qualities")
    op.drop_table("match_status")
    op.drop_table("forms")
    op.drop_table("experiences")
    # ### end Alembic commands ###
